@model SchoolPortal.Web.Models.Company.UpdateCompanyViewModel

@{
	// Debug output
	Console.WriteLine($"Edit Company - CountryId: {Model.CountryId}");
	Console.WriteLine($"Edit Company - StateId: {Model.StateId}");
	Console.WriteLine($"Edit Company - CityId: {Model.CityId}");
	Console.WriteLine($"Edit Company - JurisdictionArea: {Model.JurisdictionArea}");
	Console.WriteLine($"Edit Company - Countries count: {Model.Countries?.Count}");
	Console.WriteLine($"Edit Company - States count: {Model.States?.Count}");
	Console.WriteLine($"Edit Company - Cities count: {Model.Cities?.Count}");
	Console.WriteLine($"Edit Company - JurisdictionAreas count: {Model.JurisdictionAreas?.Count}");

	ViewData["Title"] = "Edit Company";
}

<!-- Debug information -->
<div class="alert alert-info" style="display: none;" id="debugInfo">
	<strong>Debug Information:</strong><br/>
	CountryId: @Model.CountryId<br/>
	StateId: @Model.StateId<br/>
	CityId: @Model.CityId<br/>
	JurisdictionArea: @Model.JurisdictionArea<br/>
	Countries Count: @(Model.Countries?.Count ?? 0)<br/>
	States Count: @(Model.States?.Count ?? 0)<br/>
	Cities Count: @(Model.Cities?.Count ?? 0)<br/>
	JurisdictionAreas Count: @(Model.JurisdictionAreas?.Count ?? 0)<br/>
</div>

<div class="card">
	<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
		<h4 class="mb-0">Edit Company</h4>
		<button type="button" class="btn btn-light btn-sm" onclick="toggleDebugInfo()">Debug Info</button>
	</div>
	<div class="card-body">
		<form asp-action="Edit" method="post" id="companyForm">
			<input type="hidden" asp-for="Id" />
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			
			<div class="row mb-3">
				<div class="col-md-6">
					<div class="form-group">
						<label asp-for="CompanyName" class="form-label"></label>
						<input asp-for="CompanyName" class="form-control" />
						<span asp-validation-for="CompanyName" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label asp-for="Email" class="form-label"></label>
						<input asp-for="Email" class="form-control" />
						<span asp-validation-for="Email" class="text-danger"></span>
					</div>
				</div>
			</div>

			<div class="form-group mb-3">
				<label asp-for="Description" class="form-label"></label>
				<textarea asp-for="Description" class="form-control" rows="3"></textarea>
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>

			<div class="form-group mb-3">
				<label asp-for="Address" class="form-label"></label>
				<textarea asp-for="Address" class="form-control" rows="2"></textarea>
				<span asp-validation-for="Address" class="text-danger"></span>
			</div>

			<div class="row mb-3">
				<div class="col-md-4">
					<div class="form-group">
						<label asp-for="CountryId" class="form-label">Country</label>
						<select asp-for="CountryId" class="form-select" id="countryDropdown">
							<option value="">-- Select Country --</option>
							@if (Model.Countries != null)
							{
								foreach (var country in Model.Countries)
								{
									<option value="@country.Id" selected="@(country.Id == Model.CountryId)">
										@(country.Id == Model.CountryId ? $"{country.CountryName} (Current)" : country.CountryName)
									</option>
								}
							}
						</select>
						<span asp-validation-for="CountryId" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-4">
					<div class="form-group">
						<label asp-for="StateId" class="form-label">State</label>
						<select asp-for="StateId" class="form-select" id="stateDropdown">
							<option value="">-- Select State --</option>
							@if (Model.States != null)
							{
								foreach (var state in Model.States)
								{
									var isStateSelected = state.Id == Model.StateId;
									<option value="@state.Id" selected="@(isStateSelected ? "selected" : null)">@state.StateName</option>
								}
							}
						</select>
						<span asp-validation-for="StateId" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-4">
					<div class="form-group">
						<label asp-for="CityId" class="form-label">City</label>
						<select asp-for="CityId" class="form-select" id="cityDropdown" disabled="@(Model.StateId == Guid.Empty)">
							<option value="">-- Select City --</option>
							@if (Model.Cities != null && Model.Cities.Any())
							{
								foreach (var city in Model.Cities)
								{
									var isCitySelected = city.Id == Model.CityId;
									<option value="@city.Id" selected="@(isCitySelected ? "selected" : null)">@city.CityName</option>
								}
							}
						</select>
						<span asp-validation-for="CityId" class="text-danger"></span>
					</div>
				</div>
			</div>

			<div class="row mb-3">
				<div class="col-md-6">
					<div class="form-group">
						<label asp-for="ZipCode" class="form-label">Zip Code</label>
						<input asp-for="ZipCode" class="form-control" />
						<span asp-validation-for="ZipCode" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label asp-for="JurisdictionArea" class="form-label">Jurisdiction Area</label>
						<select asp-for="JurisdictionArea" class="form-select" id="judistrictionAreaDropdown">
							<option value="">-- Select Jurisdiction Area --</option>
							@if (Model.JurisdictionAreas != null)
							{
								foreach (var jurisdiction in Model.JurisdictionAreas)
								{
									if (jurisdiction != null)
									{
										var isJurisdictionSelected = Model.JurisdictionArea != null && 
											(jurisdiction.Id.ToString() == Model.JurisdictionArea || 
											 jurisdiction.Id.ToString() == Model.JurisdictionArea.ToString());
										<option value="@jurisdiction.Id" selected="@(isJurisdictionSelected ? "selected" : null)">@jurisdiction.CityName</option>
									}
								}
							}
						</select>
						<span asp-validation-for="JurisdictionArea" class="text-danger"></span>
					</div>
				</div>
			</div>

			<div class="row mb-3">
				<div class="col-md-6">
					<div class="form-group">
						<label asp-for="EstablishmentYear" class="form-label">Establishment Year</label>
						<input asp-for="EstablishmentYear" class="form-control" />
						<span asp-validation-for="EstablishmentYear" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label asp-for="Status" class="form-label">Status</label>
						<select asp-for="Status" class="form-select">
						<option value="">-- Select Status --</option>
						@{
							var statuses = new[] { "INC", "CMP", "PEND", "ERR" };
							foreach (var status in statuses)
							{
								if (Model.Status == status)
								{
									<option value="@status" selected="selected">@status</option>
								}
								else
								{
									<option value="@status">@status</option>
								}
							}
						}
					</select>
						<span asp-validation-for="Status" class="text-danger"></span>
					</div>
				</div>
			</div>

			<div class="form-group mb-3">
				<label asp-for="StatusMessage" class="form-label">Status Message</label>
				<textarea asp-for="StatusMessage" class="form-control" rows="2" readonly></textarea>
				<span asp-validation-for="StatusMessage" class="text-danger"></span>
			</div>

			<div class="form-check form-switch mb-4">
				<input class="form-check-input" type="checkbox" asp-for="IsActive">
				<label class="form-check-label" asp-for="IsActive"></label>
			</div>

			<div class="form-group mt-4">
				<button type="submit" class="btn btn-primary">Save Changes</button>
				<a asp-action="Index" class="btn btn-secondary">Cancel</a>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
	
	<script>
		// Function to update status message based on status
		function updateStatusMessage(forceUpdate = false) {
			const status = $('#Status').val();
			const currentMessage = $('#StatusMessage').val();
			let message = '';
			
			// Only update if forced, or if there's no existing message, or if it's one of our default messages
			if (forceUpdate || !currentMessage || currentMessage.startsWith('[')) {
				switch(status) {
					case 'INC':
						message = '[In Progress]';
						break;
					case 'CMP':
						message = '[Completed]';
						break;
					case 'PEND':
						message = '[Pending]';
						break;
					case 'ERR':
						message = '[Error]';
						break;
					default:
						message = '';
				}
				
				$('#StatusMessage').val(message);
			}
		}
		
		$(document).ready(function() {
			// Initialize status message on page load
			updateStatusMessage();
			
			// Update status message when status changes (force update when user changes it)
			$('#Status').on('change', function() {
				updateStatusMessage(true);
			});
			
			// Function to load states based on country
			function loadStates(countryId) {
				var stateDropdown = $('#stateDropdown');
				var cityDropdown = $('#cityDropdown');
				
				// Only reset if we don't already have states loaded (more than just the default option)
				if (stateDropdown.find('option').length <= 1) {
					// Reset and disable state and city dropdowns
					stateDropdown.empty().append($('<option>', {
						value: '',
						text: '-- Select State --'
					})).prop('disabled', true);
					
					cityDropdown.empty().append($('<option>', {
						value: '',
						text: '-- Select City --'
					})).prop('disabled', true);
				}
				
				if (countryId) {
					stateDropdown.prop('disabled', true);
					
					// Call API to get states for the selected country
					$.get('@Url.Action("GetStatesByCountry", "Company")', { countryId: countryId })
						.done(function(data) {
							if (data && data.length > 0) {
								stateDropdown.prop('disabled', false);
								
								// Add states to dropdown
								$.each(data, function(index, state) {
									stateDropdown.append($('<option>', {
										value: state.id,
										text: state.name
									}));
								});
								
								// If there's a previously selected state, try to select it
								var selectedStateId = '@Model.StateId';
								if (selectedStateId) {
									stateDropdown.val(selectedStateId);
									// Load cities for the selected state
									loadCities(selectedStateId);
								}
							} else {
								stateDropdown.append($('<option>', {
									value: '',
									text: 'No states available'
								}));
							}
						})
						.fail(function() {
							console.error('Error loading states');
							stateDropdown.append($('<option>', {
								value: '',
								text: 'Error loading states'
							}));
						})
						.always(function() {
							stateDropdown.prop('disabled', false);
						});
				}
			}

			// Function to load cities based on state
			function loadCities(stateId) {
				var cityDropdown = $('#cityDropdown');
				
				// Only reset if we don't already have cities loaded (more than just the default option)
				if (cityDropdown.find('option').length <= 1) {
					// Reset and disable city dropdown
					cityDropdown.empty().append($('<option>', {
						value: '',
						text: '-- Select City --'
					})).prop('disabled', true);
				}
				
				if (stateId) {
					cityDropdown.prop('disabled', true);
					
					// Call API to get cities for the selected state
					$.get('@Url.Action("GetCitiesByState", "Company")', { stateId: stateId })
						.done(function(data) {
							if (data && data.length > 0) {
								cityDropdown.prop('disabled', false);
								
								// Add cities to dropdown
								$.each(data, function(index, city) {
									cityDropdown.append($('<option>', {
										value: city.id,
										text: city.name
									}));
								});
								
								// If there's a previously selected city, try to select it
								var selectedCityId = '@Model.CityId';
								if (selectedCityId) {
									cityDropdown.val(selectedCityId);
								}
							} else {
								cityDropdown.append($('<option>', {
									value: '',
									text: 'No cities available'
								}));
							}
						})
						.fail(function() {
							console.error('Error loading cities');
							cityDropdown.append($('<option>', {
								value: '',
								text: 'Error loading cities'
							}));
						})
						.always(function() {
							cityDropdown.prop('disabled', false);
						});
				}
			}

			// Handle country change
			$('#countryDropdown').change(function() {
				loadStates($(this).val());
			});

			// Handle state change
			$('#stateDropdown').change(function() {
				loadCities($(this).val());
			});
			
			// Initialize dropdowns if values are already selected
			// Only load states if country is selected AND we don't already have states loaded
			if ($('#countryDropdown').val() && $('#stateDropdown option').length <= 1) {
				loadStates($('#countryDropdown').val());
			}
			// Only load cities if state is selected AND we don't already have cities loaded
			else if ($('#stateDropdown').val() && $('#cityDropdown option').length <= 1) {
				loadCities($('#stateDropdown').val());
			}
		});
	</script>
}